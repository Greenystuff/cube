name: Build & Publish custom Cube image

on:
  push:
    branches: [ pre_agg_obervables ]  # ajuste si besoin
  workflow_dispatch:

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      # Nom du repo d'image sur Docker Hub (modifie "cube-custom" si tu veux)
      IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/cube-custom

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Détecte le bon Dockerfile du monorepo Cube (prod en priorité)
      - name: Detect Dockerfile
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if [ -f packages/cubejs-docker/Dockerfile ]; then
            echo "DOCKERFILE_PATH=packages/cubejs-docker/Dockerfile" >> $GITHUB_ENV
            echo "BUILD_CONTEXT=." >> $GITHUB_ENV
          elif [ -f packages/cubejs-docker/dev.Dockerfile ]; then
            echo "DOCKERFILE_PATH=packages/cubejs-docker/dev.Dockerfile" >> $GITHUB_ENV
            echo "BUILD_CONTEXT=." >> $GITHUB_ENV
          else
            echo "Aucun Dockerfile trouvé aux emplacements attendus."
            echo "Contenu de packages/cubejs-docker/ s'il existe :"
            ls -la packages/cubejs-docker/ || true
            exit 1
          fi
          echo "Dockerfile retenu: ${DOCKERFILE_PATH}"
          ls -la "${DOCKERFILE_PATH}"

      - name: Set up QEMU (multi-arch possible plus tard)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ env.IMAGE_REPO }}
          # Tags simples et robustes (branche, tag git, sha)
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
      
      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          platforms: linux/amd64           # passe à "linux/amd64,linux/arm64" si tu veux du multi-arch
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max